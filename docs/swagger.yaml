basePath: /
definitions:
  queries.AuthorizedUserView:
    properties:
      company_id:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      role:
        type: string
    type: object
  request.CreateReservationRequest:
    properties:
      couponCode:
        type: string
      endTime:
        type: string
      note:
        type: string
      resourceId:
        type: string
      startTime:
        type: string
    required:
    - endTime
    - resourceId
    - startTime
    type: object
  request.CreateReviewRequest:
    properties:
      comment:
        maxLength: 1000
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: integer
      reservationId:
        type: string
      resourceId:
        type: string
    required:
    - comment
    - rating
    - reservationId
    - resourceId
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  request.UpdateReviewRequest:
    properties:
      comment:
        maxLength: 1000
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: integer
    type: object
  response.LoginResponse:
    properties:
      user:
        $ref: '#/definitions/queries.AuthorizedUserView'
    type: object
  response.ReservationListResponse:
    properties:
      createdAt:
        type: string
      id:
        type: string
      priceCents:
        type: integer
      resourceId:
        type: string
      resourceName:
        type: string
      slot:
        type: string
      status:
        type: string
    type: object
  response.ReservationResponse:
    properties:
      couponCode:
        type: string
      couponId:
        type: string
      createdAt:
        type: string
      id:
        type: string
      note:
        type: string
      priceCents:
        type: integer
      resourceId:
        type: string
      resourceName:
        type: string
      slot:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      userEmail:
        type: string
      userId:
        type: string
    type: object
  response.ResourceRatingStatsResponse:
    properties:
      averageRating:
        type: number
      rating1Count:
        type: integer
      rating2Count:
        type: integer
      rating3Count:
        type: integer
      rating4Count:
        type: integer
      rating5Count:
        type: integer
      resourceId:
        type: string
      totalReviews:
        type: integer
      updatedAt:
        type: integer
    type: object
  response.ReviewListItemResponse:
    properties:
      comment:
        type: string
      createdAt:
        type: integer
      id:
        type: string
      rating:
        type: integer
      userEmail:
        type: string
    type: object
  response.ReviewResponse:
    properties:
      comment:
        type: string
      createdAt:
        type: integer
      id:
        type: string
      rating:
        type: integer
      reservationId:
        type: string
      resourceId:
        type: string
      resourceName:
        type: string
      updatedAt:
        type: integer
      userEmail:
        type: string
      userId:
        type: string
    type: object
info:
  contact: {}
  description: JWT Authorization header using the Bearer scheme
  title: Gin Clean Starter
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      description: Logout current user session
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth
  /auth/me:
    get:
      description: Get current authenticated user information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/queries.AuthorizedUserView'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - auth
  /auth/refresh:
    post:
      description: Refresh access token using refresh token from cookie
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - auth
  /health:
    get:
      description: Check if the service is healthy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check
      tags:
      - health
  /reservations:
    get:
      description: Get all reservations for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.ReservationListResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user reservations
      tags:
      - reservations
    post:
      consumes:
      - application/json
      description: Create a new reservation with idempotency key
      parameters:
      - description: Idempotency key for duplicate prevention
        in: header
        name: Idempotency-Key
        required: true
        type: string
      - description: Reservation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateReservationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.ReservationResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "422":
          description: Unprocessable Entity
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create reservation
      tags:
      - reservations
  /reservations/{id}:
    get:
      description: Get reservation by ID
      parameters:
      - description: Reservation ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ReservationResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get reservation
      tags:
      - reservations
  /resources/{id}/rating-stats:
    get:
      description: Get rating statistics for a resource
      parameters:
      - description: Resource ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResourceRatingStatsResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Resource rating stats
      tags:
      - reviews
  /resources/{id}/reviews:
    get:
      description: List reviews for a resource with optional rating filters and keyset
        pagination
      parameters:
      - description: Resource ID
        in: path
        name: id
        required: true
        type: string
      - description: Minimum rating (1-5)
        in: query
        name: min_rating
        type: integer
      - description: Maximum rating (1-5)
        in: query
        name: max_rating
        type: integer
      - description: Max items (default 20)
        in: query
        name: limit
        type: integer
      - description: Cursor for keyset pagination
        in: query
        name: after
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.ReviewListItemResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List resource reviews
      tags:
      - reviews
  /reviews:
    post:
      consumes:
      - application/json
      description: Create a new review for a completed reservation
      parameters:
      - description: Create review request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create review
      tags:
      - reviews
  /reviews/{id}:
    delete:
      description: Delete own review (admins can delete any)
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete review
      tags:
      - reviews
    get:
      description: Get a review by ID
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ReviewResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get review
      tags:
      - reviews
    put:
      consumes:
      - application/json
      description: Update own review by ID
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: string
      - description: Update review request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateReviewRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update review
      tags:
      - reviews
  /users/{id}/reviews:
    get:
      description: List reviews posted by a user (viewer can only access own)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Max items (default 20)
        in: query
        name: limit
        type: integer
      - description: Cursor for keyset pagination
        in: query
        name: after
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.ReviewListItemResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List user reviews
      tags:
      - reviews
schemes:
- http
- https
swagger: "2.0"
