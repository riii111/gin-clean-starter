// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: idempotency.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createIdempotencyKey = `-- name: CreateIdempotencyKey :exec
INSERT INTO idempotency_keys (
    key,
    user_id,
    endpoint,
    request_hash,
    status,
    expires_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreateIdempotencyKeyParams struct {
	Key         uuid.UUID          `json:"key"`
	UserID      uuid.UUID          `json:"user_id"`
	Endpoint    string             `json:"endpoint"`
	RequestHash string             `json:"request_hash"`
	Status      string             `json:"status"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateIdempotencyKey(ctx context.Context, db DBTX, arg CreateIdempotencyKeyParams) error {
	_, err := db.Exec(ctx, createIdempotencyKey,
		arg.Key,
		arg.UserID,
		arg.Endpoint,
		arg.RequestHash,
		arg.Status,
		arg.ExpiresAt,
	)
	return err
}

const deleteExpiredIdempotencyKeys = `-- name: DeleteExpiredIdempotencyKeys :execrows
DELETE FROM idempotency_keys 
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredIdempotencyKeys(ctx context.Context, db DBTX) (int64, error) {
	result, err := db.Exec(ctx, deleteExpiredIdempotencyKeys)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getIdempotencyKey = `-- name: GetIdempotencyKey :one
SELECT 
    key,
    user_id,
    endpoint,
    request_hash,
    response_body_hash,
    status,
    expires_at,
    created_at,
    updated_at
FROM idempotency_keys 
WHERE key = $1 AND user_id = $2
`

type GetIdempotencyKeyParams struct {
	Key    uuid.UUID `json:"key"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetIdempotencyKey(ctx context.Context, db DBTX, arg GetIdempotencyKeyParams) (IdempotencyKeys, error) {
	row := db.QueryRow(ctx, getIdempotencyKey, arg.Key, arg.UserID)
	var i IdempotencyKeys
	err := row.Scan(
		&i.Key,
		&i.UserID,
		&i.Endpoint,
		&i.RequestHash,
		&i.ResponseBodyHash,
		&i.Status,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateIdempotencyKeyStatus = `-- name: UpdateIdempotencyKeyStatus :exec
UPDATE idempotency_keys 
SET 
    status = $3,
    response_body_hash = $4,
    updated_at = NOW()
WHERE key = $1 AND user_id = $2
`

type UpdateIdempotencyKeyStatusParams struct {
	Key              uuid.UUID   `json:"key"`
	UserID           uuid.UUID   `json:"user_id"`
	Status           string      `json:"status"`
	ResponseBodyHash pgtype.Text `json:"response_body_hash"`
}

func (q *Queries) UpdateIdempotencyKeyStatus(ctx context.Context, db DBTX, arg UpdateIdempotencyKeyStatusParams) error {
	_, err := db.Exec(ctx, updateIdempotencyKeyStatus,
		arg.Key,
		arg.UserID,
		arg.Status,
		arg.ResponseBodyHash,
	)
	return err
}
