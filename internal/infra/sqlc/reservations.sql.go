// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reservations.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createReservation = `-- name: CreateReservation :one
INSERT INTO reservations (
    resource_id,
    user_id,
    slot,
    status,
    price_cents,
    coupon_id,
    note
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, resource_id, user_id, slot, status, price_cents, coupon_id, note, created_at, updated_at
`

type CreateReservationParams struct {
	ResourceID uuid.UUID   `json:"resource_id"`
	UserID     uuid.UUID   `json:"user_id"`
	Slot       string      `json:"slot"`
	Status     string      `json:"status"`
	PriceCents int32       `json:"price_cents"`
	CouponID   pgtype.UUID `json:"coupon_id"`
	Note       pgtype.Text `json:"note"`
}

func (q *Queries) CreateReservation(ctx context.Context, db DBTX, arg CreateReservationParams) (Reservations, error) {
	row := db.QueryRow(ctx, createReservation,
		arg.ResourceID,
		arg.UserID,
		arg.Slot,
		arg.Status,
		arg.PriceCents,
		arg.CouponID,
		arg.Note,
	)
	var i Reservations
	err := row.Scan(
		&i.ID,
		&i.ResourceID,
		&i.UserID,
		&i.Slot,
		&i.Status,
		&i.PriceCents,
		&i.CouponID,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReservationByID = `-- name: GetReservationByID :one
SELECT 
    r.id,
    r.resource_id,
    r.user_id,
    r.slot,
    r.status,
    r.price_cents,
    r.coupon_id,
    r.note,
    r.created_at,
    r.updated_at,
    res.name AS resource_name,
    u.email AS user_email,
    c.code AS coupon_code
FROM reservations AS r
INNER JOIN resources AS res ON r.resource_id = res.id
INNER JOIN users AS u ON r.user_id = u.id
LEFT JOIN coupons AS c ON r.coupon_id = c.id
WHERE r.id = $1
`

type GetReservationByIDRow struct {
	ID           uuid.UUID          `json:"id"`
	ResourceID   uuid.UUID          `json:"resource_id"`
	UserID       uuid.UUID          `json:"user_id"`
	Slot         string             `json:"slot"`
	Status       string             `json:"status"`
	PriceCents   int32              `json:"price_cents"`
	CouponID     pgtype.UUID        `json:"coupon_id"`
	Note         pgtype.Text        `json:"note"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	ResourceName string             `json:"resource_name"`
	UserEmail    string             `json:"user_email"`
	CouponCode   pgtype.Text        `json:"coupon_code"`
}

func (q *Queries) GetReservationByID(ctx context.Context, db DBTX, id uuid.UUID) (GetReservationByIDRow, error) {
	row := db.QueryRow(ctx, getReservationByID, id)
	var i GetReservationByIDRow
	err := row.Scan(
		&i.ID,
		&i.ResourceID,
		&i.UserID,
		&i.Slot,
		&i.Status,
		&i.PriceCents,
		&i.CouponID,
		&i.Note,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResourceName,
		&i.UserEmail,
		&i.CouponCode,
	)
	return i, err
}

const getReservationsByUserID = `-- name: GetReservationsByUserID :many
SELECT 
    r.id,
    r.resource_id,
    r.user_id,
    r.slot,
    r.status,
    r.price_cents,
    r.coupon_id,
    r.note,
    r.created_at,
    r.updated_at,
    res.name AS resource_name
FROM reservations AS r
INNER JOIN resources AS res ON r.resource_id = res.id
WHERE r.user_id = $1
ORDER BY r.created_at DESC
`

type GetReservationsByUserIDRow struct {
	ID           uuid.UUID          `json:"id"`
	ResourceID   uuid.UUID          `json:"resource_id"`
	UserID       uuid.UUID          `json:"user_id"`
	Slot         string             `json:"slot"`
	Status       string             `json:"status"`
	PriceCents   int32              `json:"price_cents"`
	CouponID     pgtype.UUID        `json:"coupon_id"`
	Note         pgtype.Text        `json:"note"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	ResourceName string             `json:"resource_name"`
}

func (q *Queries) GetReservationsByUserID(ctx context.Context, db DBTX, userID uuid.UUID) ([]GetReservationsByUserIDRow, error) {
	rows, err := db.Query(ctx, getReservationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReservationsByUserIDRow
	for rows.Next() {
		var i GetReservationsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.ResourceID,
			&i.UserID,
			&i.Slot,
			&i.Status,
			&i.PriceCents,
			&i.CouponID,
			&i.Note,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ResourceName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReservationSlot = `-- name: UpdateReservationSlot :exec
UPDATE reservations 
SET 
    slot = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateReservationSlotParams struct {
	ID   uuid.UUID `json:"id"`
	Slot string    `json:"slot"`
}

func (q *Queries) UpdateReservationSlot(ctx context.Context, db DBTX, arg UpdateReservationSlotParams) error {
	_, err := db.Exec(ctx, updateReservationSlot, arg.ID, arg.Slot)
	return err
}

const updateReservationStatus = `-- name: UpdateReservationStatus :exec
UPDATE reservations 
SET 
    status = $2,
    updated_at = NOW()
WHERE id = $1
`

type UpdateReservationStatusParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateReservationStatus(ctx context.Context, db DBTX, arg UpdateReservationStatusParams) error {
	_, err := db.Exec(ctx, updateReservationStatus, arg.ID, arg.Status)
	return err
}
