// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash, role, company_id, is_active)
VALUES ($1, $2, $3, $4, true)
RETURNING id, email, role, company_id, last_login, is_active, created_at, updated_at
`

type CreateUserParams struct {
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	Role         string      `json:"role"`
	CompanyID    pgtype.UUID `json:"company_id"`
}

type CreateUserRow struct {
	ID        uuid.UUID          `json:"id"`
	Email     string             `json:"email"`
	Role      string             `json:"role"`
	CompanyID pgtype.UUID        `json:"company_id"`
	LastLogin pgtype.Timestamptz `json:"last_login"`
	IsActive  bool               `json:"is_active"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, arg CreateUserParams) (CreateUserRow, error) {
	row := db.QueryRow(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
		arg.CompanyID,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.CompanyID,
		&i.LastLogin,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT
    id,
    email,
    password_hash,
    role,
    company_id,
    last_login,
    is_active,
    created_at,
    updated_at
FROM users
WHERE email = $1
`

func (q *Queries) FindUserByEmail(ctx context.Context, db DBTX, email string) (Users, error) {
	row := db.QueryRow(ctx, findUserByEmail, email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.CompanyID,
		&i.LastLogin,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, email, role, company_id, last_login, is_active, created_at, updated_at
FROM users 
WHERE id = $1
`

type FindUserByIDRow struct {
	ID        uuid.UUID          `json:"id"`
	Email     string             `json:"email"`
	Role      string             `json:"role"`
	CompanyID pgtype.UUID        `json:"company_id"`
	LastLogin pgtype.Timestamptz `json:"last_login"`
	IsActive  bool               `json:"is_active"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) FindUserByID(ctx context.Context, db DBTX, id uuid.UUID) (FindUserByIDRow, error) {
	row := db.QueryRow(ctx, findUserByID, id)
	var i FindUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.CompanyID,
		&i.LastLogin,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users 
SET last_login = NOW(), updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, db DBTX, id uuid.UUID) error {
	_, err := db.Exec(ctx, updateUserLastLogin, id)
	return err
}
