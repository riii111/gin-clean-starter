// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notifications.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createNotificationJob = `-- name: CreateNotificationJob :exec
INSERT INTO notification_jobs (
    kind,
    payload,
    run_at,
    status
) VALUES (
    $1, $2, $3, $4
)
`

type CreateNotificationJobParams struct {
	Kind    string             `json:"kind"`
	Payload []byte             `json:"payload"`
	RunAt   pgtype.Timestamptz `json:"run_at"`
	Status  string             `json:"status"`
}

func (q *Queries) CreateNotificationJob(ctx context.Context, db DBTX, arg CreateNotificationJobParams) error {
	_, err := db.Exec(ctx, createNotificationJob,
		arg.Kind,
		arg.Payload,
		arg.RunAt,
		arg.Status,
	)
	return err
}

const getPendingNotificationJobs = `-- name: GetPendingNotificationJobs :many
SELECT 
    id,
    kind,
    payload,
    run_at,
    attempts,
    status,
    last_error,
    created_at,
    updated_at
FROM notification_jobs 
WHERE status = 'queued' AND run_at <= NOW()
ORDER BY run_at ASC
LIMIT $1
FOR UPDATE SKIP LOCKED
`

func (q *Queries) GetPendingNotificationJobs(ctx context.Context, db DBTX, limit int32) ([]NotificationJobs, error) {
	rows, err := db.Query(ctx, getPendingNotificationJobs, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NotificationJobs
	for rows.Next() {
		var i NotificationJobs
		if err := rows.Scan(
			&i.ID,
			&i.Kind,
			&i.Payload,
			&i.RunAt,
			&i.Attempts,
			&i.Status,
			&i.LastError,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotificationJobStatus = `-- name: UpdateNotificationJobStatus :exec
UPDATE notification_jobs 
SET 
    status = $2,
    attempts = attempts + 1,
    last_error = $3,
    updated_at = NOW()
WHERE id = $1
`

type UpdateNotificationJobStatusParams struct {
	ID        uuid.UUID   `json:"id"`
	Status    string      `json:"status"`
	LastError pgtype.Text `json:"last_error"`
}

func (q *Queries) UpdateNotificationJobStatus(ctx context.Context, db DBTX, arg UpdateNotificationJobStatusParams) error {
	_, err := db.Exec(ctx, updateNotificationJobStatus, arg.ID, arg.Status, arg.LastError)
	return err
}
