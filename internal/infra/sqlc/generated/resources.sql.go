// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: resources.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getAllResources = `-- name: GetAllResources :many
SELECT 
    id,
    name,
    lead_time_min,
    created_at,
    updated_at
FROM resources 
ORDER BY name
`

func (q *Queries) GetAllResources(ctx context.Context, db DBTX) ([]Resources, error) {
	rows, err := db.Query(ctx, getAllResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resources
	for rows.Next() {
		var i Resources
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LeadTimeMin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourceByID = `-- name: GetResourceByID :one
SELECT 
    id,
    name,
    lead_time_min,
    created_at,
    updated_at
FROM resources 
WHERE id = $1
`

func (q *Queries) GetResourceByID(ctx context.Context, db DBTX, id uuid.UUID) (Resources, error) {
	row := db.QueryRow(ctx, getResourceByID, id)
	var i Resources
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LeadTimeMin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const searchResourcesByName = `-- name: SearchResourcesByName :many
SELECT 
    id,
    name,
    lead_time_min,
    created_at,
    updated_at
FROM resources 
WHERE name ILIKE '%' || $1 || '%'
ORDER BY name
`

func (q *Queries) SearchResourcesByName(ctx context.Context, db DBTX, dollar_1 pgtype.Text) ([]Resources, error) {
	rows, err := db.Query(ctx, searchResourcesByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resources
	for rows.Next() {
		var i Resources
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LeadTimeMin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
