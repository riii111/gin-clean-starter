// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/readstore/notification.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/readstore/notification.go -destination=tests/mock/readstore/notification_mock.go -package=readstoremock
//

// Package readstoremock is a generated GoMock package.
package readstoremock

import (
	context "context"
	sqlc "gin-clean-starter/internal/infra/sqlc/generated"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNotificationReadQueries is a mock of NotificationReadQueries interface.
type MockNotificationReadQueries struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationReadQueriesMockRecorder
	isgomock struct{}
}

// MockNotificationReadQueriesMockRecorder is the mock recorder for MockNotificationReadQueries.
type MockNotificationReadQueriesMockRecorder struct {
	mock *MockNotificationReadQueries
}

// NewMockNotificationReadQueries creates a new mock instance.
func NewMockNotificationReadQueries(ctrl *gomock.Controller) *MockNotificationReadQueries {
	mock := &MockNotificationReadQueries{ctrl: ctrl}
	mock.recorder = &MockNotificationReadQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationReadQueries) EXPECT() *MockNotificationReadQueriesMockRecorder {
	return m.recorder
}

// GetPendingNotificationJobs mocks base method.
func (m *MockNotificationReadQueries) GetPendingNotificationJobs(ctx context.Context, db sqlc.DBTX, limit int32) ([]sqlc.NotificationJobs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingNotificationJobs", ctx, db, limit)
	ret0, _ := ret[0].([]sqlc.NotificationJobs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingNotificationJobs indicates an expected call of GetPendingNotificationJobs.
func (mr *MockNotificationReadQueriesMockRecorder) GetPendingNotificationJobs(ctx, db, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingNotificationJobs", reflect.TypeOf((*MockNotificationReadQueries)(nil).GetPendingNotificationJobs), ctx, db, limit)
}
