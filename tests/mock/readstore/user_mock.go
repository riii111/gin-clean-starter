// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/readstore/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/readstore/user.go -destination=tests/mock/readstore/user_mock.go -package=readstoremock
//

// Package readstoremock is a generated GoMock package.
package readstoremock

import (
	context "context"
	sqlc "gin-clean-starter/internal/infra/sqlc/generated"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserReadQueries is a mock of UserReadQueries interface.
type MockUserReadQueries struct {
	ctrl     *gomock.Controller
	recorder *MockUserReadQueriesMockRecorder
	isgomock struct{}
}

// MockUserReadQueriesMockRecorder is the mock recorder for MockUserReadQueries.
type MockUserReadQueriesMockRecorder struct {
	mock *MockUserReadQueries
}

// NewMockUserReadQueries creates a new mock instance.
func NewMockUserReadQueries(ctrl *gomock.Controller) *MockUserReadQueries {
	mock := &MockUserReadQueries{ctrl: ctrl}
	mock.recorder = &MockUserReadQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReadQueries) EXPECT() *MockUserReadQueriesMockRecorder {
	return m.recorder
}

// FindUserByEmail mocks base method.
func (m *MockUserReadQueries) FindUserByEmail(ctx context.Context, db sqlc.DBTX, email string) (sqlc.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByEmail", ctx, db, email)
	ret0, _ := ret[0].(sqlc.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByEmail indicates an expected call of FindUserByEmail.
func (mr *MockUserReadQueriesMockRecorder) FindUserByEmail(ctx, db, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByEmail", reflect.TypeOf((*MockUserReadQueries)(nil).FindUserByEmail), ctx, db, email)
}

// FindUserByID mocks base method.
func (m *MockUserReadQueries) FindUserByID(ctx context.Context, db sqlc.DBTX, id uuid.UUID) (sqlc.FindUserByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", ctx, db, id)
	ret0, _ := ret[0].(sqlc.FindUserByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserReadQueriesMockRecorder) FindUserByID(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserReadQueries)(nil).FindUserByID), ctx, db, id)
}
