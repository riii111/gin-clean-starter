// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/readstore/resource.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/readstore/resource.go -destination=tests/mock/readstore/resource_mock.go -package=readstoremock
//

// Package readstoremock is a generated GoMock package.
package readstoremock

import (
	context "context"
	sqlc "gin-clean-starter/internal/infra/sqlc/generated"
	shared "gin-clean-starter/internal/usecase/shared"
	reflect "reflect"

	uuid "github.com/google/uuid"
	pgtype "github.com/jackc/pgx/v5/pgtype"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceReadQueries is a mock of ResourceReadQueries interface.
type MockResourceReadQueries struct {
	ctrl     *gomock.Controller
	recorder *MockResourceReadQueriesMockRecorder
	isgomock struct{}
}

// MockResourceReadQueriesMockRecorder is the mock recorder for MockResourceReadQueries.
type MockResourceReadQueriesMockRecorder struct {
	mock *MockResourceReadQueries
}

// NewMockResourceReadQueries creates a new mock instance.
func NewMockResourceReadQueries(ctrl *gomock.Controller) *MockResourceReadQueries {
	mock := &MockResourceReadQueries{ctrl: ctrl}
	mock.recorder = &MockResourceReadQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceReadQueries) EXPECT() *MockResourceReadQueriesMockRecorder {
	return m.recorder
}

// GetAllResources mocks base method.
func (m *MockResourceReadQueries) GetAllResources(ctx context.Context, db sqlc.DBTX) ([]sqlc.Resources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllResources", ctx, db)
	ret0, _ := ret[0].([]sqlc.Resources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllResources indicates an expected call of GetAllResources.
func (mr *MockResourceReadQueriesMockRecorder) GetAllResources(ctx, db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllResources", reflect.TypeOf((*MockResourceReadQueries)(nil).GetAllResources), ctx, db)
}

// GetResourceByID mocks base method.
func (m *MockResourceReadQueries) GetResourceByID(ctx context.Context, db sqlc.DBTX, id uuid.UUID) (sqlc.Resources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceByID", ctx, db, id)
	ret0, _ := ret[0].(sqlc.Resources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceByID indicates an expected call of GetResourceByID.
func (mr *MockResourceReadQueriesMockRecorder) GetResourceByID(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceByID", reflect.TypeOf((*MockResourceReadQueries)(nil).GetResourceByID), ctx, db, id)
}

// SearchResourcesByName mocks base method.
func (m *MockResourceReadQueries) SearchResourcesByName(ctx context.Context, db sqlc.DBTX, name pgtype.Text) ([]sqlc.Resources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchResourcesByName", ctx, db, name)
	ret0, _ := ret[0].([]sqlc.Resources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchResourcesByName indicates an expected call of SearchResourcesByName.
func (mr *MockResourceReadQueriesMockRecorder) SearchResourcesByName(ctx, db, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResourcesByName", reflect.TypeOf((*MockResourceReadQueries)(nil).SearchResourcesByName), ctx, db, name)
}

// MockResourceStore is a mock of ResourceStore interface.
type MockResourceStore struct {
	ctrl     *gomock.Controller
	recorder *MockResourceStoreMockRecorder
	isgomock struct{}
}

// MockResourceStoreMockRecorder is the mock recorder for MockResourceStore.
type MockResourceStoreMockRecorder struct {
	mock *MockResourceStore
}

// NewMockResourceStore creates a new mock instance.
func NewMockResourceStore(ctrl *gomock.Controller) *MockResourceStore {
	mock := &MockResourceStore{ctrl: ctrl}
	mock.recorder = &MockResourceStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceStore) EXPECT() *MockResourceStoreMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockResourceStore) FindAll(ctx context.Context) ([]*shared.ResourceSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*shared.ResourceSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockResourceStoreMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockResourceStore)(nil).FindAll), ctx)
}

// FindByID mocks base method.
func (m *MockResourceStore) FindByID(ctx context.Context, id uuid.UUID) (*shared.ResourceSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*shared.ResourceSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockResourceStoreMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockResourceStore)(nil).FindByID), ctx, id)
}

// SearchByName mocks base method.
func (m *MockResourceStore) SearchByName(ctx context.Context, name string) ([]*shared.ResourceSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", ctx, name)
	ret0, _ := ret[0].([]*shared.ResourceSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockResourceStoreMockRecorder) SearchByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockResourceStore)(nil).SearchByName), ctx, name)
}
