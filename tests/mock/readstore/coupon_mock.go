// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/readstore/coupon.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/readstore/coupon.go -destination=tests/mock/readstore/coupon_mock.go -package=readstoremock
//

// Package readstoremock is a generated GoMock package.
package readstoremock

import (
	context "context"
	sqlc "gin-clean-starter/internal/infra/sqlc/generated"
	shared "gin-clean-starter/internal/usecase/shared"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCouponReadQueries is a mock of CouponReadQueries interface.
type MockCouponReadQueries struct {
	ctrl     *gomock.Controller
	recorder *MockCouponReadQueriesMockRecorder
	isgomock struct{}
}

// MockCouponReadQueriesMockRecorder is the mock recorder for MockCouponReadQueries.
type MockCouponReadQueriesMockRecorder struct {
	mock *MockCouponReadQueries
}

// NewMockCouponReadQueries creates a new mock instance.
func NewMockCouponReadQueries(ctrl *gomock.Controller) *MockCouponReadQueries {
	mock := &MockCouponReadQueries{ctrl: ctrl}
	mock.recorder = &MockCouponReadQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouponReadQueries) EXPECT() *MockCouponReadQueriesMockRecorder {
	return m.recorder
}

// GetCouponByCode mocks base method.
func (m *MockCouponReadQueries) GetCouponByCode(ctx context.Context, db sqlc.DBTX, code string) (sqlc.Coupons, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouponByCode", ctx, db, code)
	ret0, _ := ret[0].(sqlc.Coupons)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouponByCode indicates an expected call of GetCouponByCode.
func (mr *MockCouponReadQueriesMockRecorder) GetCouponByCode(ctx, db, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouponByCode", reflect.TypeOf((*MockCouponReadQueries)(nil).GetCouponByCode), ctx, db, code)
}

// MockCouponStore is a mock of CouponStore interface.
type MockCouponStore struct {
	ctrl     *gomock.Controller
	recorder *MockCouponStoreMockRecorder
	isgomock struct{}
}

// MockCouponStoreMockRecorder is the mock recorder for MockCouponStore.
type MockCouponStoreMockRecorder struct {
	mock *MockCouponStore
}

// NewMockCouponStore creates a new mock instance.
func NewMockCouponStore(ctrl *gomock.Controller) *MockCouponStore {
	mock := &MockCouponStore{ctrl: ctrl}
	mock.recorder = &MockCouponStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouponStore) EXPECT() *MockCouponStoreMockRecorder {
	return m.recorder
}

// FindByCode mocks base method.
func (m *MockCouponStore) FindByCode(ctx context.Context, code string) (*shared.CouponSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCode", ctx, code)
	ret0, _ := ret[0].(*shared.CouponSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCode indicates an expected call of FindByCode.
func (mr *MockCouponStoreMockRecorder) FindByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCode", reflect.TypeOf((*MockCouponStore)(nil).FindByCode), ctx, code)
}
