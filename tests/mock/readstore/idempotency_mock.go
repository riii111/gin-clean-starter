// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/readstore/idempotency.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/readstore/idempotency.go -destination=tests/mock/readstore/idempotency_mock.go -package=readstoremock
//

// Package readstoremock is a generated GoMock package.
package readstoremock

import (
	context "context"
	sqlc "gin-clean-starter/internal/infra/sqlc/generated"
	shared "gin-clean-starter/internal/usecase/shared"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIdempotencyReadQueries is a mock of IdempotencyReadQueries interface.
type MockIdempotencyReadQueries struct {
	ctrl     *gomock.Controller
	recorder *MockIdempotencyReadQueriesMockRecorder
	isgomock struct{}
}

// MockIdempotencyReadQueriesMockRecorder is the mock recorder for MockIdempotencyReadQueries.
type MockIdempotencyReadQueriesMockRecorder struct {
	mock *MockIdempotencyReadQueries
}

// NewMockIdempotencyReadQueries creates a new mock instance.
func NewMockIdempotencyReadQueries(ctrl *gomock.Controller) *MockIdempotencyReadQueries {
	mock := &MockIdempotencyReadQueries{ctrl: ctrl}
	mock.recorder = &MockIdempotencyReadQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdempotencyReadQueries) EXPECT() *MockIdempotencyReadQueriesMockRecorder {
	return m.recorder
}

// GetIdempotencyKey mocks base method.
func (m *MockIdempotencyReadQueries) GetIdempotencyKey(ctx context.Context, db sqlc.DBTX, arg sqlc.GetIdempotencyKeyParams) (sqlc.IdempotencyKeys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdempotencyKey", ctx, db, arg)
	ret0, _ := ret[0].(sqlc.IdempotencyKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdempotencyKey indicates an expected call of GetIdempotencyKey.
func (mr *MockIdempotencyReadQueriesMockRecorder) GetIdempotencyKey(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdempotencyKey", reflect.TypeOf((*MockIdempotencyReadQueries)(nil).GetIdempotencyKey), ctx, db, arg)
}

// MockIdempotencyStore is a mock of IdempotencyStore interface.
type MockIdempotencyStore struct {
	ctrl     *gomock.Controller
	recorder *MockIdempotencyStoreMockRecorder
	isgomock struct{}
}

// MockIdempotencyStoreMockRecorder is the mock recorder for MockIdempotencyStore.
type MockIdempotencyStoreMockRecorder struct {
	mock *MockIdempotencyStore
}

// NewMockIdempotencyStore creates a new mock instance.
func NewMockIdempotencyStore(ctrl *gomock.Controller) *MockIdempotencyStore {
	mock := &MockIdempotencyStore{ctrl: ctrl}
	mock.recorder = &MockIdempotencyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdempotencyStore) EXPECT() *MockIdempotencyStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIdempotencyStore) Get(ctx context.Context, tx sqlc.DBTX, key, userID uuid.UUID) (*shared.IdempotencyRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, tx, key, userID)
	ret0, _ := ret[0].(*shared.IdempotencyRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIdempotencyStoreMockRecorder) Get(ctx, tx, key, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIdempotencyStore)(nil).Get), ctx, tx, key, userID)
}
