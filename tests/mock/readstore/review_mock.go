// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/readstore/review.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/readstore/review.go -destination=tests/mock/readstore/review_mock.go -package=readstoremock
//

// Package readstoremock is a generated GoMock package.
package readstoremock

import (
	context "context"
	sqlc "gin-clean-starter/internal/infra/sqlc/generated"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockReviewReadQueries is a mock of ReviewReadQueries interface.
type MockReviewReadQueries struct {
	ctrl     *gomock.Controller
	recorder *MockReviewReadQueriesMockRecorder
	isgomock struct{}
}

// MockReviewReadQueriesMockRecorder is the mock recorder for MockReviewReadQueries.
type MockReviewReadQueriesMockRecorder struct {
	mock *MockReviewReadQueries
}

// NewMockReviewReadQueries creates a new mock instance.
func NewMockReviewReadQueries(ctrl *gomock.Controller) *MockReviewReadQueries {
	mock := &MockReviewReadQueries{ctrl: ctrl}
	mock.recorder = &MockReviewReadQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewReadQueries) EXPECT() *MockReviewReadQueriesMockRecorder {
	return m.recorder
}

// GetResourceRatingStats mocks base method.
func (m *MockReviewReadQueries) GetResourceRatingStats(ctx context.Context, db sqlc.DBTX, resourceID uuid.UUID) (sqlc.ResourceRatingStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceRatingStats", ctx, db, resourceID)
	ret0, _ := ret[0].(sqlc.ResourceRatingStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceRatingStats indicates an expected call of GetResourceRatingStats.
func (mr *MockReviewReadQueriesMockRecorder) GetResourceRatingStats(ctx, db, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceRatingStats", reflect.TypeOf((*MockReviewReadQueries)(nil).GetResourceRatingStats), ctx, db, resourceID)
}

// GetReviewViewByID mocks base method.
func (m *MockReviewReadQueries) GetReviewViewByID(ctx context.Context, db sqlc.DBTX, id uuid.UUID) (sqlc.GetReviewViewByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewViewByID", ctx, db, id)
	ret0, _ := ret[0].(sqlc.GetReviewViewByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewViewByID indicates an expected call of GetReviewViewByID.
func (mr *MockReviewReadQueriesMockRecorder) GetReviewViewByID(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewViewByID", reflect.TypeOf((*MockReviewReadQueries)(nil).GetReviewViewByID), ctx, db, id)
}

// GetReviewsByResourceFirstPage mocks base method.
func (m *MockReviewReadQueries) GetReviewsByResourceFirstPage(ctx context.Context, db sqlc.DBTX, arg sqlc.GetReviewsByResourceFirstPageParams) ([]sqlc.GetReviewsByResourceFirstPageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByResourceFirstPage", ctx, db, arg)
	ret0, _ := ret[0].([]sqlc.GetReviewsByResourceFirstPageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByResourceFirstPage indicates an expected call of GetReviewsByResourceFirstPage.
func (mr *MockReviewReadQueriesMockRecorder) GetReviewsByResourceFirstPage(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByResourceFirstPage", reflect.TypeOf((*MockReviewReadQueries)(nil).GetReviewsByResourceFirstPage), ctx, db, arg)
}

// GetReviewsByResourceKeyset mocks base method.
func (m *MockReviewReadQueries) GetReviewsByResourceKeyset(ctx context.Context, db sqlc.DBTX, arg sqlc.GetReviewsByResourceKeysetParams) ([]sqlc.GetReviewsByResourceKeysetRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByResourceKeyset", ctx, db, arg)
	ret0, _ := ret[0].([]sqlc.GetReviewsByResourceKeysetRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByResourceKeyset indicates an expected call of GetReviewsByResourceKeyset.
func (mr *MockReviewReadQueriesMockRecorder) GetReviewsByResourceKeyset(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByResourceKeyset", reflect.TypeOf((*MockReviewReadQueries)(nil).GetReviewsByResourceKeyset), ctx, db, arg)
}

// GetReviewsByUserFirstPage mocks base method.
func (m *MockReviewReadQueries) GetReviewsByUserFirstPage(ctx context.Context, db sqlc.DBTX, arg sqlc.GetReviewsByUserFirstPageParams) ([]sqlc.GetReviewsByUserFirstPageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByUserFirstPage", ctx, db, arg)
	ret0, _ := ret[0].([]sqlc.GetReviewsByUserFirstPageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByUserFirstPage indicates an expected call of GetReviewsByUserFirstPage.
func (mr *MockReviewReadQueriesMockRecorder) GetReviewsByUserFirstPage(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByUserFirstPage", reflect.TypeOf((*MockReviewReadQueries)(nil).GetReviewsByUserFirstPage), ctx, db, arg)
}

// GetReviewsByUserKeyset mocks base method.
func (m *MockReviewReadQueries) GetReviewsByUserKeyset(ctx context.Context, db sqlc.DBTX, arg sqlc.GetReviewsByUserKeysetParams) ([]sqlc.GetReviewsByUserKeysetRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReviewsByUserKeyset", ctx, db, arg)
	ret0, _ := ret[0].([]sqlc.GetReviewsByUserKeysetRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReviewsByUserKeyset indicates an expected call of GetReviewsByUserKeyset.
func (mr *MockReviewReadQueriesMockRecorder) GetReviewsByUserKeyset(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReviewsByUserKeyset", reflect.TypeOf((*MockReviewReadQueries)(nil).GetReviewsByUserKeyset), ctx, db, arg)
}
