// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/readstore/reservation.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/readstore/reservation.go -destination=tests/mock/readstore/reservation_mock.go -package=readstoremock
//

// Package readstoremock is a generated GoMock package.
package readstoremock

import (
	context "context"
	sqlc "gin-clean-starter/internal/infra/sqlc/generated"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockReservationViewQueries is a mock of ReservationViewQueries interface.
type MockReservationViewQueries struct {
	ctrl     *gomock.Controller
	recorder *MockReservationViewQueriesMockRecorder
	isgomock struct{}
}

// MockReservationViewQueriesMockRecorder is the mock recorder for MockReservationViewQueries.
type MockReservationViewQueriesMockRecorder struct {
	mock *MockReservationViewQueries
}

// NewMockReservationViewQueries creates a new mock instance.
func NewMockReservationViewQueries(ctrl *gomock.Controller) *MockReservationViewQueries {
	mock := &MockReservationViewQueries{ctrl: ctrl}
	mock.recorder = &MockReservationViewQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationViewQueries) EXPECT() *MockReservationViewQueriesMockRecorder {
	return m.recorder
}

// GetReservationByID mocks base method.
func (m *MockReservationViewQueries) GetReservationByID(ctx context.Context, db sqlc.DBTX, id uuid.UUID) (sqlc.GetReservationByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationByID", ctx, db, id)
	ret0, _ := ret[0].(sqlc.GetReservationByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationByID indicates an expected call of GetReservationByID.
func (mr *MockReservationViewQueriesMockRecorder) GetReservationByID(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationByID", reflect.TypeOf((*MockReservationViewQueries)(nil).GetReservationByID), ctx, db, id)
}

// GetReservationsByUserIDFirstPage mocks base method.
func (m *MockReservationViewQueries) GetReservationsByUserIDFirstPage(ctx context.Context, db sqlc.DBTX, arg sqlc.GetReservationsByUserIDFirstPageParams) ([]sqlc.GetReservationsByUserIDFirstPageRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationsByUserIDFirstPage", ctx, db, arg)
	ret0, _ := ret[0].([]sqlc.GetReservationsByUserIDFirstPageRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationsByUserIDFirstPage indicates an expected call of GetReservationsByUserIDFirstPage.
func (mr *MockReservationViewQueriesMockRecorder) GetReservationsByUserIDFirstPage(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationsByUserIDFirstPage", reflect.TypeOf((*MockReservationViewQueries)(nil).GetReservationsByUserIDFirstPage), ctx, db, arg)
}

// GetReservationsByUserIDKeyset mocks base method.
func (m *MockReservationViewQueries) GetReservationsByUserIDKeyset(ctx context.Context, db sqlc.DBTX, arg sqlc.GetReservationsByUserIDKeysetParams) ([]sqlc.GetReservationsByUserIDKeysetRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservationsByUserIDKeyset", ctx, db, arg)
	ret0, _ := ret[0].([]sqlc.GetReservationsByUserIDKeysetRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservationsByUserIDKeyset indicates an expected call of GetReservationsByUserIDKeyset.
func (mr *MockReservationViewQueriesMockRecorder) GetReservationsByUserIDKeyset(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservationsByUserIDKeyset", reflect.TypeOf((*MockReservationViewQueries)(nil).GetReservationsByUserIDKeyset), ctx, db, arg)
}
