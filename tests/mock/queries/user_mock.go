// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/queries/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/queries/user.go -destination=tests/mock/queries/user_mock.go -package=queriesmock
//

// Package queriesmock is a generated GoMock package.
package queriesmock

import (
	context "context"
	queries "gin-clean-starter/internal/usecase/queries"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserQueries is a mock of UserQueries interface.
type MockUserQueries struct {
	ctrl     *gomock.Controller
	recorder *MockUserQueriesMockRecorder
	isgomock struct{}
}

// MockUserQueriesMockRecorder is the mock recorder for MockUserQueries.
type MockUserQueriesMockRecorder struct {
	mock *MockUserQueries
}

// NewMockUserQueries creates a new mock instance.
func NewMockUserQueries(ctrl *gomock.Controller) *MockUserQueries {
	mock := &MockUserQueries{ctrl: ctrl}
	mock.recorder = &MockUserQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserQueries) EXPECT() *MockUserQueriesMockRecorder {
	return m.recorder
}

// GetCurrentUser mocks base method.
func (m *MockUserQueries) GetCurrentUser(ctx context.Context, userID uuid.UUID) (*queries.AuthorizedUserView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUser", ctx, userID)
	ret0, _ := ret[0].(*queries.AuthorizedUserView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUser indicates an expected call of GetCurrentUser.
func (mr *MockUserQueriesMockRecorder) GetCurrentUser(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUser", reflect.TypeOf((*MockUserQueries)(nil).GetCurrentUser), ctx, userID)
}

// GetUserByID mocks base method.
func (m *MockUserQueries) GetUserByID(ctx context.Context, actorID uuid.UUID, actorRole string, targetID uuid.UUID) (*queries.AuthorizedUserView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, actorID, actorRole, targetID)
	ret0, _ := ret[0].(*queries.AuthorizedUserView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserQueriesMockRecorder) GetUserByID(ctx, actorID, actorRole, targetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserQueries)(nil).GetUserByID), ctx, actorID, actorRole, targetID)
}

// MockUserReadStore is a mock of UserReadStore interface.
type MockUserReadStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserReadStoreMockRecorder
	isgomock struct{}
}

// MockUserReadStoreMockRecorder is the mock recorder for MockUserReadStore.
type MockUserReadStoreMockRecorder struct {
	mock *MockUserReadStore
}

// NewMockUserReadStore creates a new mock instance.
func NewMockUserReadStore(ctrl *gomock.Controller) *MockUserReadStore {
	mock := &MockUserReadStore{ctrl: ctrl}
	mock.recorder = &MockUserReadStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReadStore) EXPECT() *MockUserReadStoreMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method.
func (m *MockUserReadStore) FindByEmail(ctx context.Context, email string) (*queries.AuthorizedUserView, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*queries.AuthorizedUserView)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserReadStoreMockRecorder) FindByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserReadStore)(nil).FindByEmail), ctx, email)
}

// FindByID mocks base method.
func (m *MockUserReadStore) FindByID(ctx context.Context, id uuid.UUID) (*queries.AuthorizedUserView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*queries.AuthorizedUserView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockUserReadStoreMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockUserReadStore)(nil).FindByID), ctx, id)
}
