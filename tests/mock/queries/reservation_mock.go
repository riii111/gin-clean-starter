// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/queries/reservation.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/queries/reservation.go -destination=tests/mock/queries/reservation_mock.go -package=queriesmock
//

// Package queriesmock is a generated GoMock package.
package queriesmock

import (
	context "context"
	queries "gin-clean-starter/internal/usecase/queries"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockReservationQueries is a mock of ReservationQueries interface.
type MockReservationQueries struct {
	ctrl     *gomock.Controller
	recorder *MockReservationQueriesMockRecorder
	isgomock struct{}
}

// MockReservationQueriesMockRecorder is the mock recorder for MockReservationQueries.
type MockReservationQueriesMockRecorder struct {
	mock *MockReservationQueries
}

// NewMockReservationQueries creates a new mock instance.
func NewMockReservationQueries(ctrl *gomock.Controller) *MockReservationQueries {
	mock := &MockReservationQueries{ctrl: ctrl}
	mock.recorder = &MockReservationQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationQueries) EXPECT() *MockReservationQueriesMockRecorder {
	return m.recorder
}

// GenerateETag mocks base method.
func (m *MockReservationQueries) GenerateETag(reservation *queries.ReservationView) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateETag", reservation)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateETag indicates an expected call of GenerateETag.
func (mr *MockReservationQueriesMockRecorder) GenerateETag(reservation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateETag", reflect.TypeOf((*MockReservationQueries)(nil).GenerateETag), reservation)
}

// GetByID mocks base method.
func (m *MockReservationQueries) GetByID(ctx context.Context, actor, id uuid.UUID) (*queries.ReservationView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, actor, id)
	ret0, _ := ret[0].(*queries.ReservationView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockReservationQueriesMockRecorder) GetByID(ctx, actor, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockReservationQueries)(nil).GetByID), ctx, actor, id)
}

// GetByIDWithRole mocks base method.
func (m *MockReservationQueries) GetByIDWithRole(ctx context.Context, actorID uuid.UUID, actorRole string, id uuid.UUID) (*queries.ReservationView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDWithRole", ctx, actorID, actorRole, id)
	ret0, _ := ret[0].(*queries.ReservationView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDWithRole indicates an expected call of GetByIDWithRole.
func (mr *MockReservationQueriesMockRecorder) GetByIDWithRole(ctx, actorID, actorRole, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithRole", reflect.TypeOf((*MockReservationQueries)(nil).GetByIDWithRole), ctx, actorID, actorRole, id)
}

// ListByUser mocks base method.
func (m *MockReservationQueries) ListByUser(ctx context.Context, userID uuid.UUID, after *queries.Cursor, limit int) ([]*queries.ReservationListItem, *queries.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", ctx, userID, after, limit)
	ret0, _ := ret[0].([]*queries.ReservationListItem)
	ret1, _ := ret[1].(*queries.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockReservationQueriesMockRecorder) ListByUser(ctx, userID, after, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockReservationQueries)(nil).ListByUser), ctx, userID, after, limit)
}

// MockReservationReadStore is a mock of ReservationReadStore interface.
type MockReservationReadStore struct {
	ctrl     *gomock.Controller
	recorder *MockReservationReadStoreMockRecorder
	isgomock struct{}
}

// MockReservationReadStoreMockRecorder is the mock recorder for MockReservationReadStore.
type MockReservationReadStoreMockRecorder struct {
	mock *MockReservationReadStore
}

// NewMockReservationReadStore creates a new mock instance.
func NewMockReservationReadStore(ctrl *gomock.Controller) *MockReservationReadStore {
	mock := &MockReservationReadStore{ctrl: ctrl}
	mock.recorder = &MockReservationReadStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationReadStore) EXPECT() *MockReservationReadStoreMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockReservationReadStore) FindByID(ctx context.Context, id uuid.UUID) (*queries.ReservationView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*queries.ReservationView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockReservationReadStoreMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockReservationReadStore)(nil).FindByID), ctx, id)
}

// FindByUserIDFirstPage mocks base method.
func (m *MockReservationReadStore) FindByUserIDFirstPage(ctx context.Context, userID uuid.UUID, limit int32) ([]*queries.ReservationListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIDFirstPage", ctx, userID, limit)
	ret0, _ := ret[0].([]*queries.ReservationListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIDFirstPage indicates an expected call of FindByUserIDFirstPage.
func (mr *MockReservationReadStoreMockRecorder) FindByUserIDFirstPage(ctx, userID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIDFirstPage", reflect.TypeOf((*MockReservationReadStore)(nil).FindByUserIDFirstPage), ctx, userID, limit)
}

// FindByUserIDKeyset mocks base method.
func (m *MockReservationReadStore) FindByUserIDKeyset(ctx context.Context, userID uuid.UUID, lastCreatedAt time.Time, lastID uuid.UUID, limit int32) ([]*queries.ReservationListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIDKeyset", ctx, userID, lastCreatedAt, lastID, limit)
	ret0, _ := ret[0].([]*queries.ReservationListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIDKeyset indicates an expected call of FindByUserIDKeyset.
func (mr *MockReservationReadStoreMockRecorder) FindByUserIDKeyset(ctx, userID, lastCreatedAt, lastID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIDKeyset", reflect.TypeOf((*MockReservationReadStore)(nil).FindByUserIDKeyset), ctx, userID, lastCreatedAt, lastID, limit)
}
