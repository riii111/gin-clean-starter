// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/queries/review.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/queries/review.go -destination=tests/mock/queries/review_mock.go -package=queriesmock
//

// Package queriesmock is a generated GoMock package.
package queriesmock

import (
	context "context"
	queries "gin-clean-starter/internal/usecase/queries"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockReviewReadStore is a mock of ReviewReadStore interface.
type MockReviewReadStore struct {
	ctrl     *gomock.Controller
	recorder *MockReviewReadStoreMockRecorder
	isgomock struct{}
}

// MockReviewReadStoreMockRecorder is the mock recorder for MockReviewReadStore.
type MockReviewReadStoreMockRecorder struct {
	mock *MockReviewReadStore
}

// NewMockReviewReadStore creates a new mock instance.
func NewMockReviewReadStore(ctrl *gomock.Controller) *MockReviewReadStore {
	mock := &MockReviewReadStore{ctrl: ctrl}
	mock.recorder = &MockReviewReadStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewReadStore) EXPECT() *MockReviewReadStoreMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockReviewReadStore) FindByID(ctx context.Context, id uuid.UUID) (*queries.ReviewView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*queries.ReviewView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockReviewReadStoreMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockReviewReadStore)(nil).FindByID), ctx, id)
}

// FindByResourceFirstPage mocks base method.
func (m *MockReviewReadStore) FindByResourceFirstPage(ctx context.Context, resourceID uuid.UUID, limit int32, minRating, maxRating *int) ([]*queries.ReviewListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByResourceFirstPage", ctx, resourceID, limit, minRating, maxRating)
	ret0, _ := ret[0].([]*queries.ReviewListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByResourceFirstPage indicates an expected call of FindByResourceFirstPage.
func (mr *MockReviewReadStoreMockRecorder) FindByResourceFirstPage(ctx, resourceID, limit, minRating, maxRating any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByResourceFirstPage", reflect.TypeOf((*MockReviewReadStore)(nil).FindByResourceFirstPage), ctx, resourceID, limit, minRating, maxRating)
}

// FindByResourceKeyset mocks base method.
func (m *MockReviewReadStore) FindByResourceKeyset(ctx context.Context, resourceID uuid.UUID, lastCreatedAt time.Time, lastID uuid.UUID, limit int32, minRating, maxRating *int) ([]*queries.ReviewListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByResourceKeyset", ctx, resourceID, lastCreatedAt, lastID, limit, minRating, maxRating)
	ret0, _ := ret[0].([]*queries.ReviewListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByResourceKeyset indicates an expected call of FindByResourceKeyset.
func (mr *MockReviewReadStoreMockRecorder) FindByResourceKeyset(ctx, resourceID, lastCreatedAt, lastID, limit, minRating, maxRating any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByResourceKeyset", reflect.TypeOf((*MockReviewReadStore)(nil).FindByResourceKeyset), ctx, resourceID, lastCreatedAt, lastID, limit, minRating, maxRating)
}

// FindByUserFirstPage mocks base method.
func (m *MockReviewReadStore) FindByUserFirstPage(ctx context.Context, userID uuid.UUID, limit int32) ([]*queries.ReviewListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserFirstPage", ctx, userID, limit)
	ret0, _ := ret[0].([]*queries.ReviewListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserFirstPage indicates an expected call of FindByUserFirstPage.
func (mr *MockReviewReadStoreMockRecorder) FindByUserFirstPage(ctx, userID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserFirstPage", reflect.TypeOf((*MockReviewReadStore)(nil).FindByUserFirstPage), ctx, userID, limit)
}

// FindByUserKeyset mocks base method.
func (m *MockReviewReadStore) FindByUserKeyset(ctx context.Context, userID uuid.UUID, lastCreatedAt time.Time, lastID uuid.UUID, limit int32) ([]*queries.ReviewListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserKeyset", ctx, userID, lastCreatedAt, lastID, limit)
	ret0, _ := ret[0].([]*queries.ReviewListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserKeyset indicates an expected call of FindByUserKeyset.
func (mr *MockReviewReadStoreMockRecorder) FindByUserKeyset(ctx, userID, lastCreatedAt, lastID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserKeyset", reflect.TypeOf((*MockReviewReadStore)(nil).FindByUserKeyset), ctx, userID, lastCreatedAt, lastID, limit)
}

// GetResourceRatingStats mocks base method.
func (m *MockReviewReadStore) GetResourceRatingStats(ctx context.Context, resourceID uuid.UUID) (*queries.ResourceRatingStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceRatingStats", ctx, resourceID)
	ret0, _ := ret[0].(*queries.ResourceRatingStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceRatingStats indicates an expected call of GetResourceRatingStats.
func (mr *MockReviewReadStoreMockRecorder) GetResourceRatingStats(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceRatingStats", reflect.TypeOf((*MockReviewReadStore)(nil).GetResourceRatingStats), ctx, resourceID)
}

// MockReviewQueries is a mock of ReviewQueries interface.
type MockReviewQueries struct {
	ctrl     *gomock.Controller
	recorder *MockReviewQueriesMockRecorder
	isgomock struct{}
}

// MockReviewQueriesMockRecorder is the mock recorder for MockReviewQueries.
type MockReviewQueriesMockRecorder struct {
	mock *MockReviewQueries
}

// NewMockReviewQueries creates a new mock instance.
func NewMockReviewQueries(ctrl *gomock.Controller) *MockReviewQueries {
	mock := &MockReviewQueries{ctrl: ctrl}
	mock.recorder = &MockReviewQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewQueries) EXPECT() *MockReviewQueriesMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockReviewQueries) GetByID(ctx context.Context, id uuid.UUID) (*queries.ReviewView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*queries.ReviewView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockReviewQueriesMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockReviewQueries)(nil).GetByID), ctx, id)
}

// GetResourceRatingStats mocks base method.
func (m *MockReviewQueries) GetResourceRatingStats(ctx context.Context, resourceID uuid.UUID) (*queries.ResourceRatingStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceRatingStats", ctx, resourceID)
	ret0, _ := ret[0].(*queries.ResourceRatingStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceRatingStats indicates an expected call of GetResourceRatingStats.
func (mr *MockReviewQueriesMockRecorder) GetResourceRatingStats(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceRatingStats", reflect.TypeOf((*MockReviewQueries)(nil).GetResourceRatingStats), ctx, resourceID)
}

// ListByResource mocks base method.
func (m *MockReviewQueries) ListByResource(ctx context.Context, resourceID uuid.UUID, filters queries.ReviewFilters, cursor *queries.Cursor, limit int) ([]*queries.ReviewListItem, *queries.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByResource", ctx, resourceID, filters, cursor, limit)
	ret0, _ := ret[0].([]*queries.ReviewListItem)
	ret1, _ := ret[1].(*queries.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByResource indicates an expected call of ListByResource.
func (mr *MockReviewQueriesMockRecorder) ListByResource(ctx, resourceID, filters, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByResource", reflect.TypeOf((*MockReviewQueries)(nil).ListByResource), ctx, resourceID, filters, cursor, limit)
}

// ListByUser mocks base method.
func (m *MockReviewQueries) ListByUser(ctx context.Context, userID, actorID uuid.UUID, actorRole string, cursor *queries.Cursor, limit int) ([]*queries.ReviewListItem, *queries.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", ctx, userID, actorID, actorRole, cursor, limit)
	ret0, _ := ret[0].([]*queries.ReviewListItem)
	ret1, _ := ret[1].(*queries.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockReviewQueriesMockRecorder) ListByUser(ctx, userID, actorID, actorRole, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockReviewQueries)(nil).ListByUser), ctx, userID, actorID, actorRole, cursor, limit)
}
