// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/token_validator.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/token_validator.go -destination=tests/mock/usecase/token_validator_mock.go -package=usecasemock
//

// Package usecasemock is a generated GoMock package.
package usecasemock

import (
	user "gin-clean-starter/internal/domain/user"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenValidator is a mock of TokenValidator interface.
type MockTokenValidator struct {
	ctrl     *gomock.Controller
	recorder *MockTokenValidatorMockRecorder
	isgomock struct{}
}

// MockTokenValidatorMockRecorder is the mock recorder for MockTokenValidator.
type MockTokenValidatorMockRecorder struct {
	mock *MockTokenValidator
}

// NewMockTokenValidator creates a new mock instance.
func NewMockTokenValidator(ctrl *gomock.Controller) *MockTokenValidator {
	mock := &MockTokenValidator{ctrl: ctrl}
	mock.recorder = &MockTokenValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenValidator) EXPECT() *MockTokenValidatorMockRecorder {
	return m.recorder
}

// ValidateToken mocks base method.
func (m *MockTokenValidator) ValidateToken(tokenString string) (uuid.UUID, user.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(user.Role)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenValidatorMockRecorder) ValidateToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenValidator)(nil).ValidateToken), tokenString)
}
