// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/reservation.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/reservation.go -destination=tests/mock/usecase/reservation_mock.go -package=usecasemock
//

// Package usecasemock is a generated GoMock package.
package usecasemock

import (
	context "context"
	reservation "gin-clean-starter/internal/domain/reservation"
	request "gin-clean-starter/internal/handler/dto/request"
	sqlc "gin-clean-starter/internal/infra/sqlc"
	usecase "gin-clean-starter/internal/usecase"
	queries "gin-clean-starter/internal/usecase/queries"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockReservationRepository is a mock of ReservationRepository interface.
type MockReservationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockReservationRepositoryMockRecorder
	isgomock struct{}
}

// MockReservationRepositoryMockRecorder is the mock recorder for MockReservationRepository.
type MockReservationRepositoryMockRecorder struct {
	mock *MockReservationRepository
}

// NewMockReservationRepository creates a new mock instance.
func NewMockReservationRepository(ctrl *gomock.Controller) *MockReservationRepository {
	mock := &MockReservationRepository{ctrl: ctrl}
	mock.recorder = &MockReservationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationRepository) EXPECT() *MockReservationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReservationRepository) Create(ctx context.Context, tx sqlc.DBTX, res *reservation.Reservation) (*queries.ReservationView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, res)
	ret0, _ := ret[0].(*queries.ReservationView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReservationRepositoryMockRecorder) Create(ctx, tx, res any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReservationRepository)(nil).Create), ctx, tx, res)
}

// MockResourceRepository is a mock of ResourceRepository interface.
type MockResourceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResourceRepositoryMockRecorder
	isgomock struct{}
}

// MockResourceRepositoryMockRecorder is the mock recorder for MockResourceRepository.
type MockResourceRepositoryMockRecorder struct {
	mock *MockResourceRepository
}

// NewMockResourceRepository creates a new mock instance.
func NewMockResourceRepository(ctrl *gomock.Controller) *MockResourceRepository {
	mock := &MockResourceRepository{ctrl: ctrl}
	mock.recorder = &MockResourceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceRepository) EXPECT() *MockResourceRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockResourceRepository) FindByID(ctx context.Context, id uuid.UUID) (*queries.ResourceView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*queries.ResourceView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockResourceRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockResourceRepository)(nil).FindByID), ctx, id)
}

// MockCouponRepository is a mock of CouponRepository interface.
type MockCouponRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCouponRepositoryMockRecorder
	isgomock struct{}
}

// MockCouponRepositoryMockRecorder is the mock recorder for MockCouponRepository.
type MockCouponRepositoryMockRecorder struct {
	mock *MockCouponRepository
}

// NewMockCouponRepository creates a new mock instance.
func NewMockCouponRepository(ctrl *gomock.Controller) *MockCouponRepository {
	mock := &MockCouponRepository{ctrl: ctrl}
	mock.recorder = &MockCouponRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouponRepository) EXPECT() *MockCouponRepositoryMockRecorder {
	return m.recorder
}

// FindByCode mocks base method.
func (m *MockCouponRepository) FindByCode(ctx context.Context, code string) (*queries.CouponView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCode", ctx, code)
	ret0, _ := ret[0].(*queries.CouponView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCode indicates an expected call of FindByCode.
func (mr *MockCouponRepositoryMockRecorder) FindByCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCode", reflect.TypeOf((*MockCouponRepository)(nil).FindByCode), ctx, code)
}

// MockIdempotencyRepository is a mock of IdempotencyRepository interface.
type MockIdempotencyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIdempotencyRepositoryMockRecorder
	isgomock struct{}
}

// MockIdempotencyRepositoryMockRecorder is the mock recorder for MockIdempotencyRepository.
type MockIdempotencyRepositoryMockRecorder struct {
	mock *MockIdempotencyRepository
}

// NewMockIdempotencyRepository creates a new mock instance.
func NewMockIdempotencyRepository(ctrl *gomock.Controller) *MockIdempotencyRepository {
	mock := &MockIdempotencyRepository{ctrl: ctrl}
	mock.recorder = &MockIdempotencyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdempotencyRepository) EXPECT() *MockIdempotencyRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIdempotencyRepository) Get(ctx context.Context, key, userID uuid.UUID) (*queries.IdempotencyKeyView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, userID)
	ret0, _ := ret[0].(*queries.IdempotencyKeyView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIdempotencyRepositoryMockRecorder) Get(ctx, key, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIdempotencyRepository)(nil).Get), ctx, key, userID)
}

// TryInsert mocks base method.
func (m *MockIdempotencyRepository) TryInsert(ctx context.Context, key, userID uuid.UUID, endpoint, requestHash string, expiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryInsert", ctx, key, userID, endpoint, requestHash, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// TryInsert indicates an expected call of TryInsert.
func (mr *MockIdempotencyRepositoryMockRecorder) TryInsert(ctx, key, userID, endpoint, requestHash, expiresAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryInsert", reflect.TypeOf((*MockIdempotencyRepository)(nil).TryInsert), ctx, key, userID, endpoint, requestHash, expiresAt)
}

// UpdateStatusCompleted mocks base method.
func (m *MockIdempotencyRepository) UpdateStatusCompleted(ctx context.Context, tx sqlc.DBTX, key, userID uuid.UUID, responseBodyHash string, resultReservationID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusCompleted", ctx, tx, key, userID, responseBodyHash, resultReservationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusCompleted indicates an expected call of UpdateStatusCompleted.
func (mr *MockIdempotencyRepositoryMockRecorder) UpdateStatusCompleted(ctx, tx, key, userID, responseBodyHash, resultReservationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusCompleted", reflect.TypeOf((*MockIdempotencyRepository)(nil).UpdateStatusCompleted), ctx, tx, key, userID, responseBodyHash, resultReservationID)
}

// MockNotificationRepository is a mock of NotificationRepository interface.
type MockNotificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationRepositoryMockRecorder
	isgomock struct{}
}

// MockNotificationRepositoryMockRecorder is the mock recorder for MockNotificationRepository.
type MockNotificationRepositoryMockRecorder struct {
	mock *MockNotificationRepository
}

// NewMockNotificationRepository creates a new mock instance.
func NewMockNotificationRepository(ctrl *gomock.Controller) *MockNotificationRepository {
	mock := &MockNotificationRepository{ctrl: ctrl}
	mock.recorder = &MockNotificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationRepository) EXPECT() *MockNotificationRepositoryMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockNotificationRepository) CreateJob(ctx context.Context, tx sqlc.DBTX, kind, topic string, payload []byte, runAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", ctx, tx, kind, topic, payload, runAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockNotificationRepositoryMockRecorder) CreateJob(ctx, tx, kind, topic, payload, runAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockNotificationRepository)(nil).CreateJob), ctx, tx, kind, topic, payload, runAt)
}

// MockReservationUseCase is a mock of ReservationUseCase interface.
type MockReservationUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockReservationUseCaseMockRecorder
	isgomock struct{}
}

// MockReservationUseCaseMockRecorder is the mock recorder for MockReservationUseCase.
type MockReservationUseCaseMockRecorder struct {
	mock *MockReservationUseCase
}

// NewMockReservationUseCase creates a new mock instance.
func NewMockReservationUseCase(ctrl *gomock.Controller) *MockReservationUseCase {
	mock := &MockReservationUseCase{ctrl: ctrl}
	mock.recorder = &MockReservationUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReservationUseCase) EXPECT() *MockReservationUseCaseMockRecorder {
	return m.recorder
}

// CreateReservation mocks base method.
func (m *MockReservationUseCase) CreateReservation(ctx context.Context, req request.CreateReservationRequest, userID, idempotencyKey uuid.UUID) (*usecase.CreateReservationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReservation", ctx, req, userID, idempotencyKey)
	ret0, _ := ret[0].(*usecase.CreateReservationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReservation indicates an expected call of CreateReservation.
func (mr *MockReservationUseCaseMockRecorder) CreateReservation(ctx, req, userID, idempotencyKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockReservationUseCase)(nil).CreateReservation), ctx, req, userID, idempotencyKey)
}
