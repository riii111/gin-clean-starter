// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/commands/review.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/commands/review.go -destination=tests/mock/commands/review_mock.go -package=commandsmock
//

// Package commandsmock is a generated GoMock package.
package commandsmock

import (
	context "context"
	request "gin-clean-starter/internal/handler/dto/request"
	commands "gin-clean-starter/internal/usecase/commands"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockReviewCommands is a mock of ReviewCommands interface.
type MockReviewCommands struct {
	ctrl     *gomock.Controller
	recorder *MockReviewCommandsMockRecorder
	isgomock struct{}
}

// MockReviewCommandsMockRecorder is the mock recorder for MockReviewCommands.
type MockReviewCommandsMockRecorder struct {
	mock *MockReviewCommands
}

// NewMockReviewCommands creates a new mock instance.
func NewMockReviewCommands(ctrl *gomock.Controller) *MockReviewCommands {
	mock := &MockReviewCommands{ctrl: ctrl}
	mock.recorder = &MockReviewCommandsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewCommands) EXPECT() *MockReviewCommandsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockReviewCommands) Create(ctx context.Context, req request.CreateReviewRequest, userID uuid.UUID) (*commands.CreateReviewResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req, userID)
	ret0, _ := ret[0].(*commands.CreateReviewResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockReviewCommandsMockRecorder) Create(ctx, req, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockReviewCommands)(nil).Create), ctx, req, userID)
}

// Delete mocks base method.
func (m *MockReviewCommands) Delete(ctx context.Context, reviewID, actorID uuid.UUID, actorRole string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, reviewID, actorID, actorRole)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockReviewCommandsMockRecorder) Delete(ctx, reviewID, actorID, actorRole any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockReviewCommands)(nil).Delete), ctx, reviewID, actorID, actorRole)
}

// Update mocks base method.
func (m *MockReviewCommands) Update(ctx context.Context, reviewID uuid.UUID, req request.UpdateReviewRequest, actorID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, reviewID, req, actorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockReviewCommandsMockRecorder) Update(ctx, reviewID, req, actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockReviewCommands)(nil).Update), ctx, reviewID, req, actorID)
}
