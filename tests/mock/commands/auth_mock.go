// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/commands/auth.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/commands/auth.go -destination=tests/mock/commands/auth_mock.go -package=commandsmock
//

// Package commandsmock is a generated GoMock package.
package commandsmock

import (
	context "context"
	request "gin-clean-starter/internal/handler/dto/request"
	commands "gin-clean-starter/internal/usecase/commands"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthCommands is a mock of AuthCommands interface.
type MockAuthCommands struct {
	ctrl     *gomock.Controller
	recorder *MockAuthCommandsMockRecorder
	isgomock struct{}
}

// MockAuthCommandsMockRecorder is the mock recorder for MockAuthCommands.
type MockAuthCommandsMockRecorder struct {
	mock *MockAuthCommands
}

// NewMockAuthCommands creates a new mock instance.
func NewMockAuthCommands(ctrl *gomock.Controller) *MockAuthCommands {
	mock := &MockAuthCommands{ctrl: ctrl}
	mock.recorder = &MockAuthCommandsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthCommands) EXPECT() *MockAuthCommandsMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthCommands) Login(ctx context.Context, req request.LoginRequest) (*commands.LoginResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, req)
	ret0, _ := ret[0].(*commands.LoginResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthCommandsMockRecorder) Login(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthCommands)(nil).Login), ctx, req)
}

// RefreshToken mocks base method.
func (m *MockAuthCommands) RefreshToken(ctx context.Context, refreshToken string) (*commands.TokenPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", ctx, refreshToken)
	ret0, _ := ret[0].(*commands.TokenPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthCommandsMockRecorder) RefreshToken(ctx, refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthCommands)(nil).RefreshToken), ctx, refreshToken)
}
