// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/repository/review.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/repository/review.go -destination=tests/mock/repository/review_mock.go -package=repositorymock
//

// Package repositorymock is a generated GoMock package.
package repositorymock

import (
	context "context"
	sqlc "gin-clean-starter/internal/infra/sqlc/generated"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockReviewWriteQueries is a mock of ReviewWriteQueries interface.
type MockReviewWriteQueries struct {
	ctrl     *gomock.Controller
	recorder *MockReviewWriteQueriesMockRecorder
	isgomock struct{}
}

// MockReviewWriteQueriesMockRecorder is the mock recorder for MockReviewWriteQueries.
type MockReviewWriteQueriesMockRecorder struct {
	mock *MockReviewWriteQueries
}

// NewMockReviewWriteQueries creates a new mock instance.
func NewMockReviewWriteQueries(ctrl *gomock.Controller) *MockReviewWriteQueries {
	mock := &MockReviewWriteQueries{ctrl: ctrl}
	mock.recorder = &MockReviewWriteQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReviewWriteQueries) EXPECT() *MockReviewWriteQueriesMockRecorder {
	return m.recorder
}

// CreateReview mocks base method.
func (m *MockReviewWriteQueries) CreateReview(ctx context.Context, db sqlc.DBTX, arg sqlc.CreateReviewParams) (sqlc.Reviews, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", ctx, db, arg)
	ret0, _ := ret[0].(sqlc.Reviews)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockReviewWriteQueriesMockRecorder) CreateReview(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockReviewWriteQueries)(nil).CreateReview), ctx, db, arg)
}

// DeleteReview mocks base method.
func (m *MockReviewWriteQueries) DeleteReview(ctx context.Context, db sqlc.DBTX, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", ctx, db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockReviewWriteQueriesMockRecorder) DeleteReview(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockReviewWriteQueries)(nil).DeleteReview), ctx, db, id)
}

// UpdateReview mocks base method.
func (m *MockReviewWriteQueries) UpdateReview(ctx context.Context, db sqlc.DBTX, arg sqlc.UpdateReviewParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReview", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReview indicates an expected call of UpdateReview.
func (mr *MockReviewWriteQueriesMockRecorder) UpdateReview(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReview", reflect.TypeOf((*MockReviewWriteQueries)(nil).UpdateReview), ctx, db, arg)
}
