// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/repository/idempotency.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/repository/idempotency.go -destination=tests/mock/repository/idempotency_mock.go -package=repositorymock
//

// Package repositorymock is a generated GoMock package.
package repositorymock

import (
	context "context"
	sqlc "gin-clean-starter/internal/infra/sqlc/generated"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIdempotencyWriteQueries is a mock of IdempotencyWriteQueries interface.
type MockIdempotencyWriteQueries struct {
	ctrl     *gomock.Controller
	recorder *MockIdempotencyWriteQueriesMockRecorder
	isgomock struct{}
}

// MockIdempotencyWriteQueriesMockRecorder is the mock recorder for MockIdempotencyWriteQueries.
type MockIdempotencyWriteQueriesMockRecorder struct {
	mock *MockIdempotencyWriteQueries
}

// NewMockIdempotencyWriteQueries creates a new mock instance.
func NewMockIdempotencyWriteQueries(ctrl *gomock.Controller) *MockIdempotencyWriteQueries {
	mock := &MockIdempotencyWriteQueries{ctrl: ctrl}
	mock.recorder = &MockIdempotencyWriteQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdempotencyWriteQueries) EXPECT() *MockIdempotencyWriteQueriesMockRecorder {
	return m.recorder
}

// ClaimExpiredIdempotencyKey mocks base method.
func (m *MockIdempotencyWriteQueries) ClaimExpiredIdempotencyKey(ctx context.Context, db sqlc.DBTX, arg sqlc.ClaimExpiredIdempotencyKeyParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClaimExpiredIdempotencyKey", ctx, db, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClaimExpiredIdempotencyKey indicates an expected call of ClaimExpiredIdempotencyKey.
func (mr *MockIdempotencyWriteQueriesMockRecorder) ClaimExpiredIdempotencyKey(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClaimExpiredIdempotencyKey", reflect.TypeOf((*MockIdempotencyWriteQueries)(nil).ClaimExpiredIdempotencyKey), ctx, db, arg)
}

// DeleteExpiredIdempotencyKeys mocks base method.
func (m *MockIdempotencyWriteQueries) DeleteExpiredIdempotencyKeys(ctx context.Context, db sqlc.DBTX) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredIdempotencyKeys", ctx, db)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExpiredIdempotencyKeys indicates an expected call of DeleteExpiredIdempotencyKeys.
func (mr *MockIdempotencyWriteQueriesMockRecorder) DeleteExpiredIdempotencyKeys(ctx, db any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredIdempotencyKeys", reflect.TypeOf((*MockIdempotencyWriteQueries)(nil).DeleteExpiredIdempotencyKeys), ctx, db)
}

// GetIdempotencyKey mocks base method.
func (m *MockIdempotencyWriteQueries) GetIdempotencyKey(ctx context.Context, db sqlc.DBTX, arg sqlc.GetIdempotencyKeyParams) (sqlc.IdempotencyKeys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdempotencyKey", ctx, db, arg)
	ret0, _ := ret[0].(sqlc.IdempotencyKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdempotencyKey indicates an expected call of GetIdempotencyKey.
func (mr *MockIdempotencyWriteQueriesMockRecorder) GetIdempotencyKey(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdempotencyKey", reflect.TypeOf((*MockIdempotencyWriteQueries)(nil).GetIdempotencyKey), ctx, db, arg)
}

// TryInsertIdempotencyKey mocks base method.
func (m *MockIdempotencyWriteQueries) TryInsertIdempotencyKey(ctx context.Context, db sqlc.DBTX, arg sqlc.TryInsertIdempotencyKeyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryInsertIdempotencyKey", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// TryInsertIdempotencyKey indicates an expected call of TryInsertIdempotencyKey.
func (mr *MockIdempotencyWriteQueriesMockRecorder) TryInsertIdempotencyKey(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryInsertIdempotencyKey", reflect.TypeOf((*MockIdempotencyWriteQueries)(nil).TryInsertIdempotencyKey), ctx, db, arg)
}

// UpdateIdempotencyKeyCompleted mocks base method.
func (m *MockIdempotencyWriteQueries) UpdateIdempotencyKeyCompleted(ctx context.Context, db sqlc.DBTX, arg sqlc.UpdateIdempotencyKeyCompletedParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdempotencyKeyCompleted", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdempotencyKeyCompleted indicates an expected call of UpdateIdempotencyKeyCompleted.
func (mr *MockIdempotencyWriteQueriesMockRecorder) UpdateIdempotencyKeyCompleted(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdempotencyKeyCompleted", reflect.TypeOf((*MockIdempotencyWriteQueries)(nil).UpdateIdempotencyKeyCompleted), ctx, db, arg)
}
