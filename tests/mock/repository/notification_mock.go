// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/repository/notification.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/repository/notification.go -destination=tests/mock/repository/notification_mock.go -package=repositorymock
//

// Package repositorymock is a generated GoMock package.
package repositorymock

import (
	context "context"
	sqlc "gin-clean-starter/internal/infra/sqlc/generated"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNotificationWriteQueries is a mock of NotificationWriteQueries interface.
type MockNotificationWriteQueries struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationWriteQueriesMockRecorder
	isgomock struct{}
}

// MockNotificationWriteQueriesMockRecorder is the mock recorder for MockNotificationWriteQueries.
type MockNotificationWriteQueriesMockRecorder struct {
	mock *MockNotificationWriteQueries
}

// NewMockNotificationWriteQueries creates a new mock instance.
func NewMockNotificationWriteQueries(ctrl *gomock.Controller) *MockNotificationWriteQueries {
	mock := &MockNotificationWriteQueries{ctrl: ctrl}
	mock.recorder = &MockNotificationWriteQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationWriteQueries) EXPECT() *MockNotificationWriteQueriesMockRecorder {
	return m.recorder
}

// CreateNotificationJob mocks base method.
func (m *MockNotificationWriteQueries) CreateNotificationJob(ctx context.Context, db sqlc.DBTX, arg sqlc.CreateNotificationJobParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotificationJob", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNotificationJob indicates an expected call of CreateNotificationJob.
func (mr *MockNotificationWriteQueriesMockRecorder) CreateNotificationJob(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotificationJob", reflect.TypeOf((*MockNotificationWriteQueries)(nil).CreateNotificationJob), ctx, db, arg)
}

// UpdateNotificationJobStatus mocks base method.
func (m *MockNotificationWriteQueries) UpdateNotificationJobStatus(ctx context.Context, db sqlc.DBTX, arg sqlc.UpdateNotificationJobStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotificationJobStatus", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotificationJobStatus indicates an expected call of UpdateNotificationJobStatus.
func (mr *MockNotificationWriteQueriesMockRecorder) UpdateNotificationJobStatus(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotificationJobStatus", reflect.TypeOf((*MockNotificationWriteQueries)(nil).UpdateNotificationJobStatus), ctx, db, arg)
}
