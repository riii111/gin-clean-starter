// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/repository/user.go
//
// Generated by this command:
//
//	mockgen -source=internal/infra/repository/user.go -destination=tests/mock/repository/user_mock.go -package=repositorymock
//

// Package repositorymock is a generated GoMock package.
package repositorymock

import (
	context "context"
	sqlc "gin-clean-starter/internal/infra/sqlc/generated"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockUserWriteQueries is a mock of UserWriteQueries interface.
type MockUserWriteQueries struct {
	ctrl     *gomock.Controller
	recorder *MockUserWriteQueriesMockRecorder
	isgomock struct{}
}

// MockUserWriteQueriesMockRecorder is the mock recorder for MockUserWriteQueries.
type MockUserWriteQueriesMockRecorder struct {
	mock *MockUserWriteQueries
}

// NewMockUserWriteQueries creates a new mock instance.
func NewMockUserWriteQueries(ctrl *gomock.Controller) *MockUserWriteQueries {
	mock := &MockUserWriteQueries{ctrl: ctrl}
	mock.recorder = &MockUserWriteQueriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserWriteQueries) EXPECT() *MockUserWriteQueriesMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserWriteQueries) CreateUser(ctx context.Context, db sqlc.DBTX, arg sqlc.CreateUserParams) (sqlc.CreateUserRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, db, arg)
	ret0, _ := ret[0].(sqlc.CreateUserRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserWriteQueriesMockRecorder) CreateUser(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserWriteQueries)(nil).CreateUser), ctx, db, arg)
}

// UpdateUserLastLogin mocks base method.
func (m *MockUserWriteQueries) UpdateUserLastLogin(ctx context.Context, db sqlc.DBTX, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLastLogin", ctx, db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLastLogin indicates an expected call of UpdateUserLastLogin.
func (mr *MockUserWriteQueriesMockRecorder) UpdateUserLastLogin(ctx, db, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLastLogin", reflect.TypeOf((*MockUserWriteQueries)(nil).UpdateUserLastLogin), ctx, db, id)
}
